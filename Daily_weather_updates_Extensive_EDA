{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9574688,"sourceType":"datasetVersion","datasetId":3678699}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/arshmankhalid/daily-weather-eda-magic?scriptVersionId=215987274\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Ultimate Global Weather Hub</p>\n","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Author Introduction</p>\n","metadata":{}},{"cell_type":"markdown","source":"# **Arshman Khalid**  \n<p style=\"font-size: 1.5rem; font-weight: bold;\">Data Scientist | Software Engineer | ex Consultant PwC | ex Senior Data Analyst Fortune 500</p>\n\nWith over 5 years of expertise in data science and software engineering, I am dedicated to transforming complex data into actionable insights. My focus lies in predictive analytics, data strategy, and the implementation of robust machine learning models that drive measurable business outcomes. I have a track record of optimizing operations, reducing costs, and improving decision-making processes across industries. Proficient in Python, Alteryx, Power BI, and cloud platforms.\n\nWhen I am not wrangling datasets, you will find me attempting to code my way to the perfect cup of coffee!\n\n<div style=\"text-align: left; font-family: Arial, sans-serif;\">\n    <table style=\"border-collapse: collapse; width: 100%;\">\n        <tr>\n            <th style=\"background-color: #f2f2f2; padding: 10px; border: 1px solid #ddd;\"><b>Attribute</b></th>\n            <th style=\"background-color: #f2f2f2; padding: 10px; border: 1px solid #ddd;\"><b>Details</b></th>\n        </tr>\n        <tr>\n            <td style=\"padding: 10px; border: 1px solid #ddd;\"><b>GitHub</b></td>\n            <td style=\"padding: 10px; border: 1px solid #ddd;\">\n                <a href=\"https://github.com\" style=\"text-decoration: none; color: white;\">\n                    <span style=\"background-color: #333; padding: 5px 10px; border-radius: 5px;\">GitHub Profile</span>\n                </a>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"padding: 10px; border: 1px solid #ddd;\"><b>LinkedIn</b></td>\n            <td style=\"padding: 10px; border: 1px solid #ddd;\">\n                <a href=\"https://www.linkedin.com\" style=\"text-decoration: none; color: white;\">\n                    <span style=\"background-color: #0077B5; padding: 5px 10px; border-radius: 5px;\">LinkedIn Profile</span>\n                </a>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"padding: 10px; border: 1px solid #ddd;\"><b>Kaggle</b></td>\n            <td style=\"padding: 10px; border: 1px solid #ddd;\">\n                <a href=\"https://www.kaggle.com\" style=\"text-decoration: none; color: white;\">\n                    <span style=\"background-color: #20BEFF; padding: 5px 10px; border-radius: 5px;\">Kaggle Profile</span>\n                </a>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"padding: 10px; border: 1px solid #ddd;\"><b>Twitter</b></td>\n            <td style=\"padding: 10px; border: 1px solid #ddd;\">\n                <a href=\"https://twitter.com\" style=\"text-decoration: none; color: white;\">\n                    <span style=\"background-color: #1DA1F2; padding: 5px 10px; border-radius: 5px;\">Twitter Profile</span>\n                </a>\n            </td>\n        </tr>\n    </table>\n</div>","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Dataset: Context and Description</p>\n","metadata":{}},{"cell_type":"markdown","source":"* This is the **Global Weather Repository Dataset** — your comprehensive source for daily weather data from countries and capital cities worldwide.\n\n* This dataset captures a wide range of features that represent current weather conditions in various locations.\n\n* `Features of the Dataset:` The dataset includes key variables such as temperature, humidity, precipitation, wind speed, and atmospheric pressure. These features provide a detailed understanding of the weather patterns affecting each region.\n\n* `Global Coverage of the Dataset:` With data from countries and capital cities around the world, the dataset offers a global perspective on weather trends and allows for comparisons between climates across different regions.\n\n* `Practical Uses of the Dataset:` This dataset is an invaluable resource for gaining deep insights into climate conditions, useful for developers, researchers, and data scientists studying weather patterns and climate change.\n","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Complete Overview of Dataset</p>\n","metadata":{}},{"cell_type":"markdown","source":"* This **Dataset** consists of **25,612 rows** and **41 columns**.\n\n* There are a total of **30 numeric columns** present in the Dataset.\n\n* There are a total of **11 categorical columns** present in the Dataset.\n\n* **No missing values** are present in the Dataset.\n\n* **No duplicates** are present in the Dataset.\n\n* There are **205 unique values** in the `Country` column.\n\n* There are **248 unique values** in the `location_name` column of this Dataset.\n\n* In the `Country` column, some unique values are **not standardized** (e.g., Colombia, Turkey, Poland, Guatemala).\n","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Goals and Objectives</p>\n","metadata":{}},{"cell_type":"markdown","source":"\n\n* My goal in working with this dataset is to explore it thoroughly and gain deep insights.\n\n* The first step in this process is data cleaning and exploration to check for missing values, duplicates, and to standardize unique values.\n\n* After cleaning the data, I created various visualization plots to provide detailed insights into the dataset.\n\n* The visualizations include **Count Plot**, **Pie Chart**, **Choropleth Map**, **3D Animated Scatter Plot**, **Violin Plot**, **Strip Plot**, **Tree Map**, and **histograms** for numeric columns, along with **boxplots** and count plots for categorical variables.\n\n* I used **Boxplots** to detect outliers.\n\n* I applied the **IQR (Interquartile Range) Method** to remove outliers from the dataset.\n\n* After removing the outliers, I re-visualized the **Boxplots** to confirm that the outliers were effectively removed.\n\n* Finally, I developed various questions and further analysis based on the insights gained from the dataset.\n\n","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Kernel Version Used</p>\n","metadata":{}},{"cell_type":"markdown","source":"### **Python Version Used: 3.10.14**","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Columns of the Dataset with Description</p>\n","metadata":{}},{"cell_type":"markdown","source":"| Column Name                             | Description                                      |\n|-----------------------------------------|--------------------------------------------------|\n| country                                 | The country where the location is situated      |\n| location_name                           | The name of the specific location                |\n| latitude                                | The geographical latitude of the location        |\n| longitude                               | The geographical longitude of the location       |\n| timezone                                | The timezone of the location                     |\n| last_updated_epoch                      | Epoch time of the last update                    |\n| last_updated                            | The last updated timestamp                        |\n| temperature_celsius                     | Temperature in degrees Celsius                    |\n| temperature_fahrenheit                  | Temperature in degrees Fahrenheit                 |\n| condition_text                          | Text description of the weather condition        |\n| wind_mph                                | Wind speed in miles per hour                     |\n| wind_kph                                | Wind speed in kilometers per hour                |\n| wind_degree                             | Wind direction in degrees                         |\n| wind_direction                          | Text description of wind direction                |\n| pressure_mb                             | Atmospheric pressure in millibars                |\n| pressure_in                             | Atmospheric pressure in inches                    |\n| precip_mm                               | Precipitation in millimeters                      |\n| precip_in                               | Precipitation in inches                           |\n| humidity                                | Humidity percentage                               |\n| cloud                                   | Cloud cover percentage                            |\n| feels_like_celsius                      | Apparent temperature in degrees Celsius          |\n| feels_like_fahrenheit                   | Apparent temperature in degrees Fahrenheit       |\n| visibility_km                           | Visibility in kilometers                          |\n| visibility_miles                        | Visibility in miles                               |\n| uv_index                                | UV index value                                   |\n| gust_mph                                | Wind gust speed in miles per hour                |\n| gust_kph                                | Wind gust speed in kilometers per hour           |\n| air_quality_Carbon_Monoxide            | Carbon monoxide level in air quality             |\n| air_quality_Ozone                       | Ozone level in air quality                       |\n| air_quality_Nitrogen_dioxide            | Nitrogen dioxide level in air quality            |\n| air_quality_Sulphur_dioxide             | Sulphur dioxide level in air quality             |\n| air_quality_PM2.5                       | PM2.5 level in air quality                       |\n| air_quality_PM10                        | PM10 level in air quality                        |\n| air_quality_us-epa-index                | US EPA air quality index                         |\n| air_quality_gb-defra-index              | UK DEFRA air quality index                       |\n| sunrise                                 | Time of sunrise                                  |\n| sunset                                  | Time of sunset                                   |\n| moonrise                                | Time of moonrise                                 |\n| moonset                                 | Time of moonset                                  |\n| moon_phase                              | Current phase of the moon                        |\n| moon_illumination                       | Illumination percentage of the moon              |\n","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Import Libraries</p>\n","metadata":{}},{"cell_type":"markdown","source":"## **About Libraries Used:**\n##### 1. `Pandas:` It is a powerful library used for data manipulation and analysis\n* It is particularly useful for working with structured data like tables or spreadsheets\n##### 2. `Numpy:` It is a Fundamental package for numerical computations in Python.\n* It Supports multi-dimensional arrays and matrices and Provides high-performance tools for working with these arrays\n##### 3. `Seaborn:` It is a statistical data visualization library\n* It Simplifies the process of creating informative and attractive visualizations It also includes built-in themes and color palettes for creating Visually appealing plots\n##### 4. `Matplotlib:` It is the foundational library which is used for creating static, animated, and interactive visualizations in Python. \n* It also allows to create wide variety of 2D graphs, including line. It also offers full control over the style and customization of the plots.","metadata":{}},{"cell_type":"code","source":"# import libraries\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n# Set color palette \nsns.set_palette(\"Set2\")  \n# ignore warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:34.706003Z","iopub.execute_input":"2024-10-08T21:16:34.706586Z","iopub.status.idle":"2024-10-08T21:16:36.81534Z","shell.execute_reply.started":"2024-10-08T21:16:34.706528Z","shell.execute_reply":"2024-10-08T21:16:36.814157Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Set the option to display the maximum number of rows and column\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:36.817475Z","iopub.execute_input":"2024-10-08T21:16:36.818026Z","iopub.status.idle":"2024-10-08T21:16:36.82305Z","shell.execute_reply.started":"2024-10-08T21:16:36.817987Z","shell.execute_reply":"2024-10-08T21:16:36.822031Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Display the Top 5 Rows of Dataset</p>\n","metadata":{}},{"cell_type":"code","source":"# Lets have a look at the First five rows of the dataset\ndf=pd.read_csv('/kaggle/input/global-weather-repository/GlobalWeatherRepository.csv')  \ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:36.824579Z","iopub.execute_input":"2024-10-08T21:16:36.825047Z","iopub.status.idle":"2024-10-08T21:16:37.251186Z","shell.execute_reply.started":"2024-10-08T21:16:36.824992Z","shell.execute_reply":"2024-10-08T21:16:37.249744Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Display Discriptive Summary</p>\n","metadata":{}},{"cell_type":"code","source":"# Summary Statistics\ndf.describe()","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.25678Z","iopub.execute_input":"2024-10-08T21:16:37.259007Z","iopub.status.idle":"2024-10-08T21:16:37.434609Z","shell.execute_reply.started":"2024-10-08T21:16:37.258947Z","shell.execute_reply":"2024-10-08T21:16:37.433385Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Dataset Info</p>\n","metadata":{}},{"cell_type":"code","source":"# Dataset structure\nprint(f'Dataset info: {df.info()}')","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.438402Z","iopub.execute_input":"2024-10-08T21:16:37.439292Z","iopub.status.idle":"2024-10-08T21:16:37.519955Z","shell.execute_reply.started":"2024-10-08T21:16:37.439237Z","shell.execute_reply":"2024-10-08T21:16:37.518613Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Number of Numeric and Categorical columns Count</p>\n","metadata":{}},{"cell_type":"code","source":"# Count numeric columns\nnumeric_columns_count = df.select_dtypes(include='number').shape[1]\n\n# Count categorical columns\ncategorical_columns_count = df.select_dtypes(include='object').shape[1]\n\n# Display the counts\nprint(f'Number of numeric columns: {numeric_columns_count}')\nprint(f'Number of categorical columns: {categorical_columns_count}')\n\n# Check the shape of the dataset\nprint(f'Shape of the Dataset is: {df.shape}')","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.522471Z","iopub.execute_input":"2024-10-08T21:16:37.522986Z","iopub.status.idle":"2024-10-08T21:16:37.536562Z","shell.execute_reply.started":"2024-10-08T21:16:37.522915Z","shell.execute_reply":"2024-10-08T21:16:37.535004Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Data Cleaning or Preprocessing</p>\n","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Missing Values</p>\n","metadata":{}},{"cell_type":"code","source":"missing_values=df.isnull().sum()\nprint(\"Missing values:\\n\", missing_values)\nmissing_values = df.isnull().sum().sum()\n# Check if there are any missing values and print the result using an f-string\nif missing_values > 0:\n    print(f\"Missing values are present. Total missing values: {missing_values}\")\nelse:\n    print(f\"No missing values are present in the Dataset.\")\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.53814Z","iopub.execute_input":"2024-10-08T21:16:37.539082Z","iopub.status.idle":"2024-10-08T21:16:37.647022Z","shell.execute_reply.started":"2024-10-08T21:16:37.539028Z","shell.execute_reply":"2024-10-08T21:16:37.645771Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Check the Duplicates</p>\n","metadata":{}},{"cell_type":"code","source":"# Count the number of duplicate rows\nduplicates_count = df.duplicated().sum()\n\n# Check if there are any duplicate rows and print the result using f-strings\nif df.duplicated().any():\n    print(f\"Duplicates are present. Total duplicate rows: {duplicates_count}\")\nelse:\n    print(f\"No duplicates are present in the Dataset.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.648438Z","iopub.execute_input":"2024-10-08T21:16:37.648835Z","iopub.status.idle":"2024-10-08T21:16:37.762508Z","shell.execute_reply.started":"2024-10-08T21:16:37.648795Z","shell.execute_reply":"2024-10-08T21:16:37.760202Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Standardize Country Names and Displaying Unique Values</p>\n","metadata":{}},{"cell_type":"code","source":"df['country'] = df['country'].apply(lambda x: 'Colombia' if x == 'كولومبيا' else x)\ndf['country'] = df['country'].apply(lambda x: 'Turkey' if x == '火鸡' else x)\ndf['country'] = df['country'].apply(lambda x: 'Poland' if x == 'Польша' else x)\ndf['country'] = df['country'].apply(lambda x: 'Turkey' if x == 'Турция' else x)\ndf['country'] = df['country'].apply(lambda x: 'Guatemala' if x == 'Гватемала' else x)\n\n# Show the last 50 unique values\nunique_countries=df['country'].nunique()\nnum_unique_countries=df['country'].unique()[-50:]\nprint(f'Num Unique countries are: {unique_countries}')\nprint(f'There are {num_unique_countries} unique values in the country column.')\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.764257Z","iopub.execute_input":"2024-10-08T21:16:37.765034Z","iopub.status.idle":"2024-10-08T21:16:37.844271Z","shell.execute_reply.started":"2024-10-08T21:16:37.764971Z","shell.execute_reply":"2024-10-08T21:16:37.843066Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Insights about each Column</p>\n","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Taking Insights about the country and location name column</p>\n","metadata":{}},{"cell_type":"code","source":"# Check and print the minimum and maximum values of the country column\nmin_country, max_country = df['country'].min(), df['country'].max()\nprint(f\"The 'country' which occurs minimum in this dataset is: {min_country}\")\nprint(f\"The 'country' which occurs maximum in this dataset is: {max_country}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.845694Z","iopub.execute_input":"2024-10-08T21:16:37.846053Z","iopub.status.idle":"2024-10-08T21:16:37.863623Z","shell.execute_reply.started":"2024-10-08T21:16:37.846015Z","shell.execute_reply":"2024-10-08T21:16:37.862439Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Show the last 50 unique values\nnum_unique_location_name = df['location_name'].nunique()\nprint(f'There are {num_unique_location_name} unique values in the location_name column.')\n# Lets check the minimum and maximum values of the id column and explore this it\nmin_location_name, max_location_name = df['location_name'].min(), df['location_name'].max()\nprint(f\"The 'Location_name' which occurs minimum in this dataset is: {min_location_name}\")\nprint(f\"The 'Location_name' which occurs maximum in this dataset is: {max_location_name}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.865083Z","iopub.execute_input":"2024-10-08T21:16:37.865438Z","iopub.status.idle":"2024-10-08T21:16:37.895277Z","shell.execute_reply.started":"2024-10-08T21:16:37.8654Z","shell.execute_reply":"2024-10-08T21:16:37.894166Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Count unique combinations of country and location_name\ncountry_location_count = df.groupby(['country', 'location_name']).size().reset_index(name='count')\n\n# Lets Get the number of unique countries along with their location names\nunique_countries = country_location_count['country'].nunique()\n\nprint(f\"Total number of unique countries along with their location names present in the dataset are: {unique_countries}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.896689Z","iopub.execute_input":"2024-10-08T21:16:37.897131Z","iopub.status.idle":"2024-10-08T21:16:37.914807Z","shell.execute_reply.started":"2024-10-08T21:16:37.897091Z","shell.execute_reply":"2024-10-08T21:16:37.913729Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Observations:**\n* There are 206 unique values present in the country column of this dataset.\n* The 'country' which occurs minimum in this dataset is: Afghanistan.\n* And The 'country' which occurs maximum in this dataset is: Zimbabwe.\n* There are 248 unique values in the location_name column of this Dataset.\n* Hence, in this Dataset there are Total 205 unique countries along with their location names present.\n* There are Total 205 unique countries along with their location names present in the dataset \n\n\n- **Comprehensive Coverage:** The dataset includes **206 unique countries** and **248 unique location names**, providing extensive global weather data.\n\n- **Data Distribution Insight:** The least represented country is Afghanistan, whereas Zimbabwe has the most entries, pointing out the need for balanced data collection.\n\n- **Future Directions:**\n  - **Enhance Data Collection:** Aim to increase data representation for countries like Afghanistan.\n  - **Advanced Analytics:** Further explore the climate trends of countries with extensive data using advanced analytical techniques.\n  - **Predictive Modeling:** Utilize the dataset for predictive modeling and real-time analysis to support decision-making in various sectors.\n","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Taking Insights from Temperature Celsius and Temperature Fahrenheit column</p>\n","metadata":{}},{"cell_type":"code","source":"# Lets Get the country and location with the highest temperature in Celsius\nhighest_temp_celsius = df.loc[df['temperature_celsius'].idxmax(), ['country', 'location_name', 'temperature_celsius']]\nprint(\"Country and Location with the Highest Temperature in Celsius:\")\nprint(highest_temp_celsius)\n\n# Lets Get the country and location with the highest temperature in Fahrenheit\nhighest_temp_fahrenheit = df.loc[df['temperature_fahrenheit'].idxmax(), ['country', 'location_name', 'temperature_fahrenheit']]\nprint(\"\\nCountry and Location with the Highest Temperature in Fahrenheit:\")\nprint(highest_temp_fahrenheit)\n\n# Lets print the overall max temperatures countries and location names\nprint(f\"\\nMaximum Temperature in Celsius: {highest_temp_celsius['temperature_celsius']}\")\nprint(f\"Maximum Temperature in Fahrenheit: {highest_temp_fahrenheit['temperature_fahrenheit']}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.916183Z","iopub.execute_input":"2024-10-08T21:16:37.916532Z","iopub.status.idle":"2024-10-08T21:16:37.929486Z","shell.execute_reply.started":"2024-10-08T21:16:37.916494Z","shell.execute_reply":"2024-10-08T21:16:37.928198Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Get the country and location with the lowest temperature in Celsius\nlowest_temp_celsius = df.loc[df['temperature_celsius'].idxmin(), ['country', 'location_name', 'temperature_celsius']]\nprint(\"\\nCountry and Location with the Lowest Temperature in Celsius:\")\nprint(lowest_temp_celsius)\n\n# Get the country and location with the lowest temperature in Fahrenheit\nlowest_temp_fahrenheit = df.loc[df['temperature_fahrenheit'].idxmin(), ['country', 'location_name', 'temperature_fahrenheit']]\n# Correct print statement to show the lowest temperature\nprint(\"\\nCountry and Location with the Lowest Temperature in Fahrenheit:\")\nprint(lowest_temp_fahrenheit)\n\n# Lets print the overall min temperatures countries and location names\nprint(f\"\\nMinimum Temperature in Celsius: {lowest_temp_celsius['temperature_celsius']}\")\nprint(f\"Minimum Temperature in Fahrenheit: {lowest_temp_fahrenheit['temperature_fahrenheit']}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.936405Z","iopub.execute_input":"2024-10-08T21:16:37.936881Z","iopub.status.idle":"2024-10-08T21:16:37.950934Z","shell.execute_reply.started":"2024-10-08T21:16:37.936826Z","shell.execute_reply":"2024-10-08T21:16:37.949691Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Observations:**\n* According to this Dataset Highest Temperature in Celsius is present in Kuwait\n* The  Highest Temperature in Celsius in Kuwait is 49.2 in Kuwait\n* And The Highest Temperature in Fahrenheit is also in Kuwait\n* The  Highest Temperature in Fahrenheit in Kuwait is: 120.6 in Kuwait\n* According to this Dataset the lowest Temperature in Celsius is present in Australia in its federal capital which is Canberra.\n* The Minimum Temperature in Celsius is -3.7 in Australia in its federal capital which is Canberra\n* The Minimum Temperature in Fahrenheit is 25.3 in Australia in its federal capital which is Canberra\n* And The lowest Temperature in Fahrenheit is also present in Australia in its federal capital which is Canberra.\n* There are total 5 months when the average temperature is lowest\n","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Taking Insights from Latitude and Longitude Column</p>\n","metadata":{}},{"cell_type":"code","source":"# Lets Find the country and location with the highest latitude\nhighest_latitude = df.loc[df['latitude'].idxmax(), ['country', 'location_name', 'latitude']]\nprint(\"Country and Location with the Highest Latitude:\")\nprint(highest_latitude)\n\n# Lets Find the country and location with the highest longitude\nhighest_longitude = df.loc[df['longitude'].idxmax(), ['country', 'location_name', 'longitude']]\nprint(\"\\nCountry and Location with the Highest Longitude:\")\nprint(highest_longitude)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.952416Z","iopub.execute_input":"2024-10-08T21:16:37.952806Z","iopub.status.idle":"2024-10-08T21:16:37.967519Z","shell.execute_reply.started":"2024-10-08T21:16:37.952767Z","shell.execute_reply":"2024-10-08T21:16:37.966378Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Find the country and location with the lowest latitude\nlowest_latitude = df.loc[df['latitude'].idxmin(), ['country', 'location_name', 'latitude']]\nprint(\"\\nCountry and Location with the Lowest Latitude:\")\nprint(lowest_latitude)\n# Find the country and location with the lowest longitude\nlowest_longitude = df.loc[df['longitude'].idxmin(), ['country', 'location_name', 'longitude']]\nprint(\"\\nCountry and Location with the Lowest Longitude:\")\nprint(lowest_longitude)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.968975Z","iopub.execute_input":"2024-10-08T21:16:37.969362Z","iopub.status.idle":"2024-10-08T21:16:37.987328Z","shell.execute_reply.started":"2024-10-08T21:16:37.969324Z","shell.execute_reply":"2024-10-08T21:16:37.986108Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Observations:**\n* According to this Dataset the Highest Latitude is of Iceland Country \n* The Reykjavik which is the capital of Iceland has Highest Latitude\n* The Highest latitude 64.15 is of Reykjavik which is the capital of Iceland \n* According to this Dataset the Highest Longitude is of Tuvalu Country \n* The Funafuti which is the capital of Tuvalu has Highest Longitude\n* The Highest longitude of Funafuti which is the capital of Tuvalu is 179.22\n* According to this Dataset the Lowest Latitude is of New Zealand Country \n* The Wellington which is the capital of New Zealand has lowest Latitude\n* The lowest latitude -41.3 is of Wellington which is the capital of  New Zealand\n* According to this Dataset the lowest Longitude is of Tuvalu Country \n* The Nuku'alofa is the capital and the chief port of the island country of Tonga has lowest Longitude\n* The lowest longitude Nuku'alofa is -175.2 in the capital and the chief port of the island country of Tonga  \n","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Taking Insights from Last Updated Column</p>\n","metadata":{}},{"cell_type":"code","source":"# Convert date columns to datetime\ndf['last_updated'] = pd.to_datetime(df['last_updated'], errors='coerce')\ndf['sunrise'] = pd.to_datetime(df['sunrise'], errors='coerce')\ndf['sunset'] = pd.to_datetime(df['sunset'], errors='coerce')\ndf['moonrise'] = pd.to_datetime(df['moonrise'], errors='coerce')\ndf['moonset'] = pd.to_datetime(df['moonset'], errors='coerce')\n\n# Display the range of last updated dates\nprint(\"Range of last updated dates:\", df['last_updated'].min(), \"to\", df['last_updated'].max())\nearliest_update = df['last_updated'].min()\nlatest_update = df['last_updated'].max()\nprint(\"The Earliest Updated time is: \", earliest_update)\nprint(\"The Latest Updated time is: \", latest_update)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:37.988688Z","iopub.execute_input":"2024-10-08T21:16:37.991464Z","iopub.status.idle":"2024-10-08T21:16:38.267181Z","shell.execute_reply.started":"2024-10-08T21:16:37.991422Z","shell.execute_reply":"2024-10-08T21:16:38.265965Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Lets check how many records were last updated in 2023?\nlast_updated_2024_count = df[df['last_updated'].dt.year == 2024].shape[0]\nprint(f\"Records last updated in 2024: {last_updated_2024_count}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:38.268701Z","iopub.execute_input":"2024-10-08T21:16:38.269152Z","iopub.status.idle":"2024-10-08T21:16:38.284816Z","shell.execute_reply.started":"2024-10-08T21:16:38.269099Z","shell.execute_reply":"2024-10-08T21:16:38.283528Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Taking Insights from Humidity Column</p>\n","metadata":{}},{"cell_type":"code","source":"# Lets Get the number of month with highest humidity\ndf['month'] = pd.to_datetime(df['last_updated']).dt.month\nhighest_avg_humidity_month = df.groupby('month')['humidity'].mean().idxmax()\nprint(\"The Number of Month with highest humidity are: \", highest_avg_humidity_month)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:38.286282Z","iopub.execute_input":"2024-10-08T21:16:38.286752Z","iopub.status.idle":"2024-10-08T21:16:38.322742Z","shell.execute_reply.started":"2024-10-08T21:16:38.286699Z","shell.execute_reply":"2024-10-08T21:16:38.321552Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Taking Insights from wind mph Column</p>\n","metadata":{}},{"cell_type":"code","source":"# location has the highest recorded wind speed\nhighest_wind_speed_location = df.loc[df['wind_mph'].idxmax(), 'location_name']\nhighest_wind_speed_value = df['wind_mph'].max()\nprint(f\"Location with the highest wind speed is: {highest_wind_speed_location} ({highest_wind_speed_value:.2f} mph)\")","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:38.324544Z","iopub.execute_input":"2024-10-08T21:16:38.324982Z","iopub.status.idle":"2024-10-08T21:16:38.333325Z","shell.execute_reply.started":"2024-10-08T21:16:38.324936Z","shell.execute_reply":"2024-10-08T21:16:38.33207Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Taking Insights from moon phase Column</p>\n","metadata":{}},{"cell_type":"code","source":"# Lets check that how many locations have a moon phase listed as \"Full Moon\"\nfull_moon_count = df[df['moon_phase'] == 'Full Moon'].shape[0]\nprint(f\"Locations with Full Moon: {full_moon_count}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:38.33514Z","iopub.execute_input":"2024-10-08T21:16:38.335566Z","iopub.status.idle":"2024-10-08T21:16:38.35609Z","shell.execute_reply.started":"2024-10-08T21:16:38.335516Z","shell.execute_reply":"2024-10-08T21:16:38.354725Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Lets have a look that at which month has the lowest average temperature\nlowest_avg_temp_month = df.groupby('month')['temperature_celsius'].mean().idxmin()\nprint(f\"Number of Month when average temperature is lowest are: {lowest_avg_temp_month}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:38.357938Z","iopub.execute_input":"2024-10-08T21:16:38.35838Z","iopub.status.idle":"2024-10-08T21:16:38.368628Z","shell.execute_reply.started":"2024-10-08T21:16:38.358331Z","shell.execute_reply":"2024-10-08T21:16:38.367492Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Observations:**\n* Range of last updated dates according to this Dataset are : 2024-05-16 01:45:00 to 2024-09-24 22:45:00\n* The Earliest Updated time according to this Dataset is:  2024-05-16 01:45:00\n* The Latest Updated time according to this Dataset is:  2024-09-24 22:45:00\n* According to this Dataset there are total 9 Month with highest humidity \n* In Bujumbura there is highest wind speed which is 1841.20 mph according to this Dataset\n* There are total Locations 967 with Full Moon\n* There are total 25417 Records last updated in 2024\n* There are total 5 Number of Month when average temperature is lowest\n\n","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Count Plot of Weather Records by Countries</p>\n","metadata":{}},{"cell_type":"markdown","source":"## **About the Code of Countplot:**\n* This plot is used for the visual representation of the top 10 countries in the dataset based on the number of weather records. \n* This code highlights the frequency of occurrences and make easier to compare countries directly by count of records which is shown at the top of each bar.\n* By creating this plot we can easily took insights about the value counts of the country column\n* .nlargest(10) is used to extracts the top 10 most frequent countries on which the plot is being created.\n* The command `filtered_df = df[df['country'].isin(top_countries)]` is used to filter the dataframe to include only those records where the country is in the top 10.\n* sns.countplot(data=filtered_df, x='country', order=top_countries) is used to create a bar plot that counts the occurrences of each country present in the Dataset.\n* The `order=top_countries` is used to ensure that the bars are displayed in the same order as the top 10 countries.\n* Then the loop is created which causes looping through each bar of the plot\n* Then add the label and the count of each Country on the Top of each Bar\n* These value counts is used to provide the deep insights about the value counts of country column of this Dataset\n* Then set the title, x-axis and y-axis label and adjust the layout\n* Finally Displays the plot","metadata":{}},{"cell_type":"code","source":"# Set a specific color palette\nsns.set_palette(\"Set2\")  # Set color palette\n\n# Count the occurrences of each country\ntop_countries = df['country'].value_counts().nlargest(10).index  # Get top 10 countries\nfiltered_df = df[df['country'].isin(top_countries)]  # Filter dataset\n\n# Create a count plot for the 'country' column\nplt.figure(figsize=(12, 6))\ncountry_counts = sns.countplot(data=filtered_df, x='country', order=top_countries)\n\n# Add counts on top of each bar as a container\nfor p in country_counts.patches:\n    count_value = int(p.get_height())\n    country_counts.annotate(f'{count_value}', \n                            (p.get_x() + p.get_width() / 2., p.get_height()), \n                            ha='center', va='bottom', fontsize=10, color='black', \n                            xytext=(0, 5), textcoords='offset points',\n                            bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.5')) \n\n# Set titles and labels\nplt.title('Count of Weather Records by Top Countries', fontsize=16, fontweight='bold')  \nplt.xlabel('Country', fontsize=14)\nplt.ylabel('Count', fontsize=14)\nplt.xticks(rotation=45)\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:38.370802Z","iopub.execute_input":"2024-10-08T21:16:38.371419Z","iopub.status.idle":"2024-10-08T21:16:38.926439Z","shell.execute_reply.started":"2024-10-08T21:16:38.371367Z","shell.execute_reply":"2024-10-08T21:16:38.925307Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Observations:**\n* The Highest Number of count is of Bulgaria Country\n* The Bulgaria Country have 294 counts\n* The Lowest Number of count is of Vietnam Country\n* The Vietnam Country have 212 counts\n* The Iran, Sudan and Madagascar have the same number of counts which is 260\n* Similarly, Bolivia, Belgium, Thiland have same number of counts which is 259\n* After the Bulgaria there are Highest number of counts of Indonesia which is 263 and then Turkey which is 261","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Exploring Categorical Data with Pie Chart Subplots</p>\n","metadata":{}},{"cell_type":"markdown","source":"## **About the Code of Pie chart Subplots:**","metadata":{}},{"cell_type":"markdown","source":"* The code is used to create the pie charts of four categorical columns such as moon_phase, condition_text, wind_direction, and country from the dataset.\n* For each column, only the top 6 categories with their percentages are shown which helps us to focus on the most important data and avoid cluttering (which causes difficulty in taking insights about the Dataset).\n* Pie charts provide us the way to understand easily that how thecategories are distributed.\n* The set the \"Set2\" palette which ensures that the charts are visually appealing and the different categories are easy to distinguish.\n* By applying this code we can generate pie charts of four categorical columns in a dataset.\n* The categorical columns list is then created which then used to visualize the plot\n* After that Subplot figures are created\n* `axes = axes.flatten()` is used to onverts the 2x2 array of subplots into a 1D list, Hence it makes easier to iterate over the subplots in the loop \n* Setting the Set2 color pelette is used to display the visually appealing plot\n* Then plot the pie chart, set the x-axis and y-axis labels and Finally Displays the plot","metadata":{}},{"cell_type":"code","source":"# Set color palette\nsns.set_palette(\"Set2\")  \n\n# List of categorical columns to plot\ncategorical_columns = ['moon_phase', 'condition_text', 'wind_direction', 'country']\n\n# Set up the subplot grid\nfig, axes = plt.subplots(2, 2, figsize=(14, 10))  # Adjust rows, cols depending on the number of plots\naxes = axes.flatten()  # Flattening for easy iteration\n\n# Lets Get Set2 colors for the pie charts\npastel_colors = sns.color_palette(\"Set2\", n_colors=6)\n\n# Loop through each categorical column\nfor i, col in enumerate(categorical_columns):\n    # Get the top 6 values\n    top_6_values = df[col].value_counts().nlargest(6)\n    \n    # Plot pie chart for each\n    top_6_values.plot(kind='pie', autopct='%1.1f%%', ax=axes[i], startangle=90, colors=pastel_colors)\n    \n    # Set title and label\n    axes[i].set_title(f\"{col}\", fontweight='bold')\n    axes[i].set_ylabel('') \n    axes[i].axis('equal')  \n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:38.92772Z","iopub.execute_input":"2024-10-08T21:16:38.92807Z","iopub.status.idle":"2024-10-08T21:16:39.877926Z","shell.execute_reply.started":"2024-10-08T21:16:38.928032Z","shell.execute_reply":"2024-10-08T21:16:39.876854Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Observations:**\n* In the moon_phase column the highest percentage is of Waxing Gibbous Column which is 26.8%\n* Then after the Waxing Gibbous Column the Highest percentage is of Waxing Cresent column which is 23.6%\n* The Full moon has the lowest percentage which is 4.0% of the moon_phase column.\n* The highest percentage of wind_direction is 19.8% in E\n* Then The highest percentage of wind_direction is in the N which is 19.8% \n* The lowest percentage of wind_direction is 15.0% in Sw\n* After analyzing the condition_text column by creating the pie chart it is determined that highest percentage which is 39.8% is partly cloudy wheather condition and 37.8% is sunny\n* The Lowest percentage which is 3.7% is over cast\n* The Higher percentage of wheather condition is Bulgaria and lowest in Turkey, Iran, Sudan, Madagascar which is same in four of them and is 16.3%","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Taking Geospatial Temperature Insights via Choropleth Map</p>\n","metadata":{}},{"cell_type":"markdown","source":"## **About the Code of Choropleth Map:**\n* This code is used to grouped the sampling technique to ensure that each country of this Dataset represented equally on the map.\n* By creating the choropleth map we can easily understand that how the locations are distributed geographically.\n* The colors represents the temperature data across different countries. \n* This is especially useful when we want to analyze the regional patterns in temperature or want to visualize the spread of locations on a global level.\n* The hover feature provides specific details about the location names in Choropleth Map.\n* Firstly this code took 20 random samples of locations from each country of the dataset and then creates a choropleth map inorder to visualize the geographical distribution of these locations\n* After applying the sampling `reset_index(drop=True)` is used to reset the index of the resulting Dataframe\n* The choropleth map basically uses the colors to represent different regions on a map\n* Various parameter like hover_name, location_mode, color, title name is usedto create the plot which provide deep insights about the Dataset.\n* Finally by this code updates the layout and displays the plot","metadata":{}},{"cell_type":"code","source":"# Sample 20 random locations from each country\nsampled_df = df.groupby('country').apply(lambda x: x.sample(min(len(x), 20))).reset_index(drop=True)\n\n# Create a geo map to visualize the locations\nfig = px.choropleth(\n    sampled_df,\n    locations='country',  \n    locationmode='country names',  \n    color='temperature_celsius', \n    hover_name='location_name',  # Hover information\n    title='<b>Geographical Distribution of Locations by Country</b>', \n    template='plotly_white'\n)\n\n# Update layout to remove the legend\nfig.update_layout(showlegend=False)\n\n# Show the plot\nfig.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:39.879472Z","iopub.execute_input":"2024-10-08T21:16:39.880028Z","iopub.status.idle":"2024-10-08T21:16:42.11038Z","shell.execute_reply.started":"2024-10-08T21:16:39.879972Z","shell.execute_reply":"2024-10-08T21:16:42.109286Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Observations:**\n* By Analyzing the Geo Map it is determined that the Highest Temperature in Celsius is present in Kuwait\n* The  Highest Temperature in Celsius in Kuwait is 49.2 in Kuwait\n* And By Analyzing the Geo Map it is determined that the lowest Temperature in Celsius is present in Australia in its federal capital which is Canberra.\n* The Minimum Temperature in Celsius is -3.7 in Australia in its federal capital which is Canberra","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Taking Weather Insights via Animated 3D scatter Plot</p>\n","metadata":{}},{"cell_type":"markdown","source":"## **About the Code of animated 3D scatter plot:**\n* This plot is used for exploring the multidimensional weather data, and it provides insights into how weather conditions vary across different countries and how temperature, humidity, and wind speed are distributed.\n* Basically, A scatter plot in three dimensions allows us to visualize three variables and insights and determine how these variables are related to each another. \n* By applying this code we can plot temperature, humidity, and wind speed etc on three different axes\n* By coloring the points based on condition_text column (which describes the weather conditions) we  can take a look that how different weather conditions are distributed across the temperature, humidity, and wind speed axes.\n* The plot is animated by countryHence this plotshows the data of different countries sequentially. Hence, by using this feature we can observe the differences or similarities in weather conditions across various countries of the Dataset.\n* We can also make the plot visually appealing by adding the marker size, axis labels, and font styling and the title \n* This code first convert the Date Formats and then create the animated scatter 3d plot\n* By providing various parameters x,y,z, color, country in animation frame and title we can create the  isightful plot so that we can take deep insights aboput the Dataset.","metadata":{}},{"cell_type":"code","source":"# Preprocessing (converting datatypes, etc.)\ndf['last_updated'] = pd.to_datetime(df['last_updated'])\n\n# Create an animated 3D scatter plot\nfig = px.scatter_3d(df, \n                     x='temperature_celsius', \n                     y='humidity', \n                     z='wind_mph',\n                     color='condition_text',  \n                     animation_frame='country',  # Frame for animation\n                     title='3D Scatter Plot of Weather Data',\n                     labels={\n                         'temperature_celsius': 'Temperature (°C)',\n                         'humidity': 'Humidity (%)',\n                         'wind_mph': 'Wind Speed (MPH)',\n                     })\n\n# Update traces and layout\nfig.update_traces(marker=dict(size=5))  # Adjust marker size\nfig.update_layout(\n    scene=dict(\n        xaxis_title='Temperature (°C)',\n        yaxis_title='Humidity (%)',\n        zaxis_title='Wind Speed (MPH)'\n    ),\n    title=dict(\n        text='3D Scatter Plot of Weather Data',\n        font=dict(size=20, family=\"Arial\", color=\"black\", weight=\"bold\")  # Set title font properties\n    )\n)\n\n# Show the figure\nfig.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:42.111923Z","iopub.execute_input":"2024-10-08T21:16:42.112285Z","iopub.status.idle":"2024-10-08T21:16:50.196331Z","shell.execute_reply.started":"2024-10-08T21:16:42.112246Z","shell.execute_reply":"2024-10-08T21:16:50.194882Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Display Violin Plot Subplots of Temperature by Country</p>\n","metadata":{}},{"cell_type":"markdown","source":"## **About the Code of Violin plot:**\n* The Violin plots are basically the combination of box plots and the density plots.\n* The violin plots provides us information about the distribution of the data across different categories Hence it shows the density of the temperature values across different locations within each country. \n* Hence, By visualizing the temperature distributions of countries we can gain insights about the temperature which varies across different locations.\n* This plot allows us to take visual comparison between countries Hence it make easier to identify trends in temperature variations geographically.\n* This code creates the violin plots in the form of subplots to visualize the distribution of temperature in Celsius across the differnt countries of the dataset. \n* Hence, Violin plots are very useful for understanding the distribution of data across different categories for a comparison of the temperature distributions in various locations.\n* df['country'].value_counts() is used to calculate the value counts across different countries\n* By this code we can select Top 20 countries\n* By using the command `rows = int(np.ceil(len(top_countries) / cols))` Calculates the required number of rows of Top 20 countries\n* Then subplots are created and flatten the axes to make it easier to iterate through the indexes\n* Finally set the title, x-axis and y-axis labels and displays the plot","metadata":{}},{"cell_type":"code","source":"# Group by 'country' and count occurrences to find the top 20 countries\ntop_countries = df['country'].value_counts().nlargest(20).index.tolist()\n\n# Filter the DataFrame for the top 20 countries\ndf_top_20_countries = df[df['country'].isin(top_countries)]\n\n# Determine the number of rows and columns for subplots\ncols = 2 \nrows = int(np.ceil(len(top_countries) / cols))\n\n# Create subplots for the top 20 countries\nfig, axs = plt.subplots(rows, cols, figsize=(12, 5 * rows))\naxs = axs.flatten()  # Flatten the axes array for easier indexing\n\n# Create a main title\nfig.suptitle('Violin Plots of Temperature in Celsius for Top 20 Countries', fontsize=16, fontweight='bold')\n\n# Create a violin plot for each of the top 20 countries\nfor i, country in enumerate(top_countries):\n    sns.violinplot(data=df_top_20_countries[df_top_20_countries['country'] == country],\n                   x='location_name', y='temperature_celsius', ax=axs[i])\n    axs[i].set_title(f'Violin Plot of Temperature in Celsius for {country}', fontweight='bold') \n    axs[i].set_xlabel('Location Name')\n    axs[i].set_ylabel('Temperature (°C)')\n    axs[i].tick_params(axis='x', rotation=45)\n    axs[i].grid()\n\n# Hide any unused subplots if there are fewer than 20 countries\nfor j in range(i + 1, len(axs)):\n    axs[j].axis('off')\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0, 1, 0.95])  \nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:50.198047Z","iopub.execute_input":"2024-10-08T21:16:50.19842Z","iopub.status.idle":"2024-10-08T21:16:56.116788Z","shell.execute_reply.started":"2024-10-08T21:16:50.198379Z","shell.execute_reply":"2024-10-08T21:16:56.115603Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Observations:**\n* After analyzing the violin plot it is determined that the Bulgaria Country & the Bogot which is the capital of colombia have highest 43 degree celcius temperature\n* And the Lom which is the Town of Bulgaria has lowest temperature which is almost 38 degree celcius\n* Indonesia (Jakarta) has Highest temperature 45 degree celcius.\n* The Wider areas of the violin plot indicate that there are more data points at those temperature levels.\n* And the Narrower areas of violin plot indicate fewer data points at those temperature levels.\n* Turkey has Highest temperature almost 43 degree celcius in Yaren\n* Iran has Highest temperature almost 42 degree celcius in Tehran\n* Sudan the Highest temperature is 48 degree celcius in Khartoum\n* Madagascar the Highest temperature is 48 degree celcius in Ivory\n* Bolivia the Highest temperature is 48 degree celcius in National\n* Belgium the Highest temperature is 35 degree celcius in Brussels and S Gravenjensdijk\n* In Thiland (Bangkok) the Highest temperature is 35 degree celcius \n* In Vietnam (Hanoi) the Highest temperature is 37 degree celcius \n* In Russia (Mascow) the Highest temperature is 34 degree celcius\n* In Pooland (warsaw) the Highest temperature is 33 degree celcius\n* In kenya (nairobi) the Highest temperature is 34 degree celcius \n* In albania (terana) the Highest temperature is 32 degree celcius \n* In mouritania (Nouakchott) the Highest temperature is 38 degree celcius \n* In Moritius (PortLouis) the Highest temperature is 28 degree celcius \n* In Malta (Valletta) the Highest temperature is 39.5 degree celcius \n* In Malasia (Kuala Lumpur) the Highest temperature is 37 degree celcius \n* In Marshall (Island majuro) the Highest temperature is 29.9 degree celcius \n* In Malawi (Lilongwe) the Highest temperature is 31.5 degree celcius ","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Visualize Temperature by Location via Strip Plot subplots</p>\n","metadata":{}},{"cell_type":"markdown","source":"## **About the Code of Strip Plot:**","metadata":{}},{"cell_type":"markdown","source":"* Strip plots are basically used to display the individual data points along a categorical columns on x axis and continuous variable on y axis.\n* Strip Plot makes easier to observe the distribution.\n* By applying this code we can easily visualize the comparison of temperature distributions across the different locations, Hence it helps us to identify distribution of temperature across different countries. \n* By creating the strip plot we can easily observe that certain locations have significantly higher temperature and certain locations have lower temperatures compared to others.\n* The code generates strip plots to visualize the temperature in Celsius on the basis of locations based on the frequency of observations present in the Dataset. \n* In this code first I Set the grid and the pelette to create the visually appleaing plots\n* By applying the code `df['location_name'].value_counts()` i took value counts of the location name column and `df[df['location_name'].isin(top_locations)]` is used to filter the top locations of the Dataframe\n* After this calculates the number of rows which is needded to display the top 10 locations of the Dataset \n* After that creating the subplot and flattens the axes and and Displays the plot.","metadata":{}},{"cell_type":"code","source":"# Set the style and palette\nsns.set(style='whitegrid', palette='Set2')\n\n# Group by 'location_name' and count occurrences to find the top 10 locations\ntop_locations = df['location_name'].value_counts().nlargest(10).index.tolist()\n\n# Filter the DataFrame for the top 10 locations\ndf_top_10_locations = df[df['location_name'].isin(top_locations)]\n\n# Determine the number of rows and columns for subplots\ncols = 2  \nrows = int(np.ceil(len(top_locations) / cols))\n\n# Create subplots for the top 10 locations\nfig, axs = plt.subplots(rows, cols, figsize=(12, 5 * rows))\naxs = axs.flatten()  # Flatten the axes array for easier indexing\n\n# Create a main title\nfig.suptitle('Strip Plots of Temperature in Celsius for Top 10 Locations', fontsize=16, fontweight='bold')\n\n# Create a strip plot for each of the top 10 locations\nfor i, location in enumerate(top_locations):\n    sns.stripplot(data=df_top_10_locations[df_top_10_locations['location_name'] == location],\n                  x='country', y='temperature_celsius', ax=axs[i], palette='Set2', jitter=True)\n    axs[i].set_title(f'Strip Plot of Temperature in Celsius for {location}', fontweight='bold') \n    axs[i].set_xlabel('Country')\n    axs[i].set_ylabel('Temperature (°C)')\n    axs[i].tick_params(axis='x')\n    axs[i].grid()\n\n# Hide any unused subplots if there are fewer than 10 locations\nfor j in range(i + 1, len(axs)):\n    axs[j].axis('off')\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0, 1, 0.95])  \nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:56.118232Z","iopub.execute_input":"2024-10-08T21:16:56.118606Z","iopub.status.idle":"2024-10-08T21:16:58.928869Z","shell.execute_reply.started":"2024-10-08T21:16:56.118566Z","shell.execute_reply":"2024-10-08T21:16:58.927797Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Observations:**\n* A strip plot is a single-axis scatter plot which is used to visualise the distribution of many individual one-dimensional values.\n* The values in strip plot are plotted as dots along one unique axis, and the dots with the same value can overlap.\n* By creating the strip plot it is observed that In kabul Afghanistan there are Highet frequeny in the region of 25-34 celcius temperature Hence the temperature in Kabul Afganistan remains in this range\n* In Abuja  there are Highet frequeny in the region of 25-33 celcius temperature Hence the temperature in Nijeria  remains in this range\n* In paris there are Highet frequeny in the region of 18-24 celcius temperature Hence the temperature in France remains in this range\n* In Helsinki there are Highet frequeny in the region of 18.5-23.5 celcius temperature Hence the temperature in Finland remains in this range\n* In Suva there are Highet frequeny in the region of 21-24 celcius temperature Hence the temperature in Fiji Islands remains in this range\n* In Dakar there are Highet frequeny in the region of 26.5-28 celcius temperature Hence the temperature in Senegal remains in this range\n* In tallinn there are Highet frequeny in the region of 17.5-23.5 celcius temperature Hence the temperature in Astinia remains in this range \n* Asmara here are Highet frequeny in the region of 22.5-26 celcius temperature Hence the temperature in Eritrea remains in this range \n* In Malabo here are Highet frequeny in the region of 24.5-30 celcius temperature Hence the temperature in Equatorial Guinea remains in this range \n* In Singapore here are Highet frequeny in the region of 28-29.5 celcius temperature Hence the temperature remains in this range ","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Tree map Visualization of Humidity and Air Quality by Country</p>\n","metadata":{}},{"cell_type":"markdown","source":"### **About the Code of Tree Map:**\n* The treemap is basically used to visualize the hierarchy present in the Data. \n* By applying this code I observe that each country is represented by a rectangle Hence the size of the country is average humidity.\n* I provide the color of each rectangle on the basis of average ozone level in the country so that we can quickly visualize the comparison of both humidity and air quality across different countries present in the Dataset.\n* `df.groupby('country')` command is used to group the dataset by the country column and after that i aggregate the data and calculate the mean for the columns which is being specified.Here, each row represents a country and the columns contain the average values for humidity and air quality pollutants\n* After that set various parameters for better visully appealing visulization to be shown. Finally Displays the plot","metadata":{}},{"cell_type":"code","source":"# Calculate average humidity and air quality metrics by country\nhumidity_air_quality = df.groupby('country').agg({\n    'humidity': 'mean',\n    'air_quality_Ozone': 'mean',\n    'air_quality_Nitrogen_dioxide': 'mean',\n    'air_quality_Sulphur_dioxide': 'mean'\n}).reset_index()\n\n# Create a treemap\nfig = px.treemap(humidity_air_quality,\n                 path=['country'],\n                 values='humidity',  \n                 color='air_quality_Ozone',  \n                 hover_data=['humidity', 'air_quality_Nitrogen_dioxide', 'air_quality_Sulphur_dioxide'],\n                 title='<b>Treemap of Average Humidity and Air Quality by Country</b>')  \n\n# Show the figure\nfig.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:58.93068Z","iopub.execute_input":"2024-10-08T21:16:58.931116Z","iopub.status.idle":"2024-10-08T21:16:59.203079Z","shell.execute_reply.started":"2024-10-08T21:16:58.931069Z","shell.execute_reply":"2024-10-08T21:16:59.202074Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Visualizing Numeric Columns Distributions</p>\n","metadata":{}},{"cell_type":"markdown","source":"### **About the Code of Histogram:**\n* The Histogram are commonly used to show the frequency distribution of continuous variables,to determine the distribution of columns such as temperature, humidity, pressure etc.\n* Adding the KDE (Kernel Density Ewstimation Line) line helps to provide a smooth curve that represent the underlying probability distribution of the data. \n* It also helps in understanding the shape of the distribution of the columns.\n* Hence, By creating the subplots, this code effectively compares multiple weather columns side by side. This is particularly useful for gaining deep insights into how different columns such as temperature, humidity, pressure are distributed across the dataset.\n* This code displays the multiple subplots where each subplot corresponds to a specific weather conditions present in the Dataset.\n* the list of column which is created in this code is basically taken to add the columns which represents the geographical data from this Dataset\n* After that set the rows, columns and flattens the axes and displays the plot.","metadata":{}},{"cell_type":"code","source":"# Specify the columns to visualize\nselected_columns = [\n    'latitude', 'longitude', 'temperature_celsius',\n    'temperature_fahrenheit', 'pressure_mb', 'pressure_in',\n    'humidity', 'feels_like_celsius', 'feels_like_fahrenheit', \n    'air_quality_Ozone'\n]\n\n# Create a figure for the subplots\nn_cols = 5\nn_rows = (len(selected_columns) + n_cols - 1) // n_cols  # Calculate number of rows needed\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(20, 4 * n_rows))\naxes = axes.flatten()  # Flatten the 2D array of axes to 1D for easy indexing\n\n# Get the SET2 color palette\nset2_palette = sns.color_palette(\"Set2\", n_colors=len(selected_columns))\n\n# Loop through the selected columns and create plots\nfor i, col in enumerate(selected_columns):\n    sns.histplot(df[col], ax=axes[i], bins=30, kde=True, color=set2_palette[i])\n    axes[i].set_title(col)\n    axes[i].set_xlabel(col)\n    axes[i].set_ylabel('Frequency')\n\n# Hide any unused subplots\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\n# Add the title \nplt.suptitle('Distribution of Weather Data columns', fontsize=16, fontweight='bold')\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0, 1, 0.95]) \nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:16:59.204573Z","iopub.execute_input":"2024-10-08T21:16:59.205067Z","iopub.status.idle":"2024-10-08T21:17:05.822247Z","shell.execute_reply.started":"2024-10-08T21:16:59.205016Z","shell.execute_reply":"2024-10-08T21:17:05.820748Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Visualizing Categorical Columns via Countplot Subplots</p>\n","metadata":{}},{"cell_type":"markdown","source":"### **About the Code of Count Plot Subplots:**\n\n* The count plot is an effective way to visualize the distribution of categories in a categorical variable. It helps to take a look that how frequently each category occurs in the dataset.\n* The List of categorical columns which is created through this code includes the wind diresction and moon phas.\n* The wind direction variable is used to captures the direction of wind blowing (e.g., North, South, etc.). Hence by Understanding the distribution of these columns helps us in analyzing the weather patterns.\n* The moon_phase variable is used to tracks the phase of the moonsuch as Full Moon, New Moon etc. It is useful for taking the insights about different moon phases\n* By applying this code and creating the subplots we efficiently visualizes categorical variables.\n* calculates the number of rows needed to create the plot helps to create the visullly appealing and insightful plot\n* Finally I set the figure, x axix and y axis labels, adjust the layout and Displays the plot","metadata":{}},{"cell_type":"code","source":"# Define the categorical columns\ncategorical_columns = ['wind_direction', 'moon_phase']\n\n# Number of rows needed\nnum_rows = (len(categorical_columns) + 2) // 3\n\n# Create subplots\nfig, axes = plt.subplots(num_rows, 3, figsize=(15, 5 * num_rows))\naxes = axes.flatten()  # Flatten to easily iterate\n\n# Create a bar plot for each categorical column\nfor idx, column in enumerate(categorical_columns):\n    sns.countplot(data=df, x=column, ax=axes[idx])\n    axes[idx].set_title(f'Count of {column}')\n    axes[idx].set_xlabel(column)\n    axes[idx].set_ylabel('Count')\n    axes[idx].tick_params(axis='x', rotation=45)  # Rotate x labels for better visibility\n\n# Hide any unused axes (if any)\nfor j in range(idx + 1, len(axes)):\n    fig.delaxes(axes[j])\n\n# Add a main title and make it bold\nplt.suptitle('Distribution of Categorical Variables', fontsize=16, fontweight='bold')\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0, 1, 0.95]) \nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:05.823992Z","iopub.execute_input":"2024-10-08T21:17:05.824392Z","iopub.status.idle":"2024-10-08T21:17:06.95892Z","shell.execute_reply.started":"2024-10-08T21:17:05.82435Z","shell.execute_reply":"2024-10-08T21:17:06.957682Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Observations:**\n* E has highest count according to wind direction column which is above 2000 almost 2200\n* The wind direction count is highest in NE which is above 1000 almost 1100\n* The Waxing Gibbous in moon_phase column has maximum count which is above 6000 almost 6300\n* The Minimum count in moon_phase column is of First Quarter which is almost 500","metadata":{}},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Display the Boxplot to Detect Outliers</p>\n","metadata":{}},{"cell_type":"markdown","source":"## **About the Code of Boxplot:** \n* This code is usually used to detect and visualize outliers present in the numeric columns of a Dataset using boxplot subplots and the Interquartile Range (IQR) method. \n* In this code selct the numeric columns first to visualize the outliers present in the numeric column\n* IQR Method is used to identify outliers and It is calculated as the difference between the 3rd quartile (Q3) and the 1st quartile (Q1) using the formula IQR = Q3 - Q1.\n* The Data points below this threshold (Q1 - 1.5 * IQR) are considered outliers and it is termed as low bound.\n* The Data points above this threshold (Q3 + 1.5 * IQR) are also considered as outliers and it is termed as upper bound.\n* The Number of rows and columns are set to create the poxplot subplopts\n* By using the command `plt.axhline(y=lower_bound)` add the red line at lower bound to detect the outliers\n* By using the command `plt.axhline(y=upper_bound)` add the red line at upper bound to detect the outliers\n* To create the insightful plot legend, title, xaxis and yaxis labels are then added and displays the plot","metadata":{}},{"cell_type":"code","source":"# Select numeric columns\nnumeric_columns = df.select_dtypes(include=['number']).columns\n\n# Calculate IQR and identify outliers\noutliers = {}\n\nfor column in numeric_columns:\n    Q1 = df[column].quantile(0.25)\n    Q3 = df[column].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    \n    # Identify outliers\n    outliers[column] = df[(df[column] < lower_bound) | (df[column] > upper_bound)]\n\n# Set up the matplotlib figure\nnum_cols = 5\nnum_rows = (len(numeric_columns) + num_cols - 1) // num_cols\n\nplt.figure(figsize=(20, num_rows * 4))\n\n# Create boxplots\nfor i, column in enumerate(numeric_columns):\n    plt.subplot(num_rows, num_cols, i + 1)\n    sns.boxplot(y=df[column], palette='Set2')\n    \n    # Add lines for lower and upper bounds to detect the outliers\n    plt.axhline(y=lower_bound, color='red', linestyle='--', label='Lower Bound')\n    plt.axhline(y=upper_bound, color='blue', linestyle='--', label='Upper Bound')\n    \n    plt.title(column)\n    plt.xlabel('')\n    \n    # Add the legend outside the boxplot area\n    plt.legend(loc='upper right', bbox_to_anchor=(1.2, 1))\n\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:06.960526Z","iopub.execute_input":"2024-10-08T21:17:06.960969Z","iopub.status.idle":"2024-10-08T21:17:16.498156Z","shell.execute_reply.started":"2024-10-08T21:17:06.960927Z","shell.execute_reply":"2024-10-08T21:17:16.496968Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Select numeric columns\nnumeric_columns = df.select_dtypes(include=['number']).columns\n\n# Create a boolean mask for outliers\noutlier_mask = pd.Series(False, index=df.index)\n\n# Calculate IQR and identify outliers\nfor column in numeric_columns:\n    Q1 = df[column].quantile(0.25)\n    Q3 = df[column].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    \n    # Update the outlier mask\n    outlier_mask |= (df[column] < lower_bound) | (df[column] > upper_bound)\n\n# Add a column to indicate outliers (True if any column has an outlier, else False)\ndf['Outlier_Flag'] = outlier_mask\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:16.499737Z","iopub.execute_input":"2024-10-08T21:17:16.500177Z","iopub.status.idle":"2024-10-08T21:17:16.599961Z","shell.execute_reply.started":"2024-10-08T21:17:16.500128Z","shell.execute_reply":"2024-10-08T21:17:16.59897Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# <p style=\"background-color: #113966; font-family: 'Arial', sans-serif; font-size: 32px; text-align: center; color: #fc7f03; padding: 15px; border-radius: 25px; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5); border: 3px solid #fc7f03;\">Visualizations of Outlier Free Data</p>\n","metadata":{}},{"cell_type":"markdown","source":"## **About the Code of Boxplot after removing outliers:** \n* This code is used to perform the outlier detection and the removal from the Dataset\n* It visualizes the cleaned data using boxplots subplots for each numeric column present in the Dataset.\n* The command `df.select_dtypes(include=['number'])` selects the numeric columns from the Dataset and it stores these column names for later use.\n* After that the code Initializes a boolean mask outlier_mask of the same length as the DataFrame .\n* All values are initially taken as False, which means no rows are considered outliers at this point\n* After that this mask will be updated as outliers are detected.\n* Hence, For each numeric column in the Dataframe, the code calculates the Interquartile Range (IQR)\n* and calculates the lower and upper boundary and removing the outliers.\n* with the name of df_no_outliers the new dataframe is created which is cleaned with outliers\n* Set the labels and title and displays the plot Finally","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Select numeric columns\nnumeric_columns = df.select_dtypes(include=['number']).columns\n\n# Create a boolean mask for outliers\noutlier_mask = pd.Series(False, index=df.index)\n\n# Calculate IQR and identify outliers\nfor column in numeric_columns:\n    Q1 = df[column].quantile(0.25)\n    Q3 = df[column].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    \n    # Update the outlier mask\n    outlier_mask |= (df[column] < lower_bound) | (df[column] > upper_bound)\n\n# Create a new DataFrame without outliers\ndf_no_outliers = df[~outlier_mask]\n\n# Set up the matplotlib figure\nnum_cols = 5\nnum_rows = (len(numeric_columns) + num_cols - 1) // num_cols\n\nplt.figure(figsize=(20, num_rows * 4))\n\n# Create boxplots for the DataFrame without outliers\nfor i, column in enumerate(numeric_columns):\n    Q1 = df_no_outliers[column].quantile(0.25)\n    Q3 = df_no_outliers[column].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    \n    plt.subplot(num_rows, num_cols, i + 1)\n    sns.boxplot(y=df_no_outliers[column], palette='Set2')\n    \n    # Add lines for lower and upper bounds specific to each column\n    plt.axhline(y=lower_bound, color='red', linestyle='--', label='Lower Bound')\n    plt.axhline(y=upper_bound, color='blue', linestyle='--', label='Upper Bound')\n    \n    plt.title(column)\n    plt.xlabel('')\n    \n    # Add the legend outside the boxplot area\n    plt.legend(loc='upper right', bbox_to_anchor=(1.2, 1))\n\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:16.601334Z","iopub.execute_input":"2024-10-08T21:17:16.601697Z","iopub.status.idle":"2024-10-08T21:17:24.333017Z","shell.execute_reply.started":"2024-10-08T21:17:16.601639Z","shell.execute_reply":"2024-10-08T21:17:24.331807Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 1. How does humidity affect temperature across different locations according to this dataset?","metadata":{}},{"cell_type":"code","source":"# Calculate average temperature by humidity level\nhumidity_temp = df.groupby('humidity')['temperature_celsius'].mean().head()\nhumidity_temp.columns = ['Humidity', 'Average_Temperature_Celsius']\n\nprint(humidity_temp)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.334772Z","iopub.execute_input":"2024-10-08T21:17:24.335228Z","iopub.status.idle":"2024-10-08T21:17:24.345518Z","shell.execute_reply.started":"2024-10-08T21:17:24.335179Z","shell.execute_reply":"2024-10-08T21:17:24.344443Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 2.  How many locations have a UV index above a certain threshold of 10?","metadata":{}},{"cell_type":"code","source":"# Count locations with UV index greater than 5\nhigh_uv_count = df[df['uv_index'] > 10].shape[0]\nprint(f\"Number of locations with UV index above 5: {high_uv_count}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.347138Z","iopub.execute_input":"2024-10-08T21:17:24.347581Z","iopub.status.idle":"2024-10-08T21:17:24.35984Z","shell.execute_reply.started":"2024-10-08T21:17:24.347534Z","shell.execute_reply":"2024-10-08T21:17:24.358632Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 3. What is the maximum and minimum temperature recorded for locations according to this Dataset?","metadata":{}},{"cell_type":"code","source":"temp_extremes = df.groupby(['country', 'location_name'])['temperature_celsius'].agg(['max', 'min']).reset_index().head()\nprint(temp_extremes)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.361718Z","iopub.execute_input":"2024-10-08T21:17:24.362239Z","iopub.status.idle":"2024-10-08T21:17:24.388315Z","shell.execute_reply.started":"2024-10-08T21:17:24.362184Z","shell.execute_reply":"2024-10-08T21:17:24.387133Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 4. what is the relationship between wind speed (in kph) and temperature?","metadata":{}},{"cell_type":"code","source":"wind_temp_correlation = df[['wind_kph', 'temperature_celsius']].corr().iloc[0, 1]\nprint(f'Correlation between wind speed and temperature: {wind_temp_correlation}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.389739Z","iopub.execute_input":"2024-10-08T21:17:24.39014Z","iopub.status.idle":"2024-10-08T21:17:24.398222Z","shell.execute_reply.started":"2024-10-08T21:17:24.390099Z","shell.execute_reply":"2024-10-08T21:17:24.396869Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 5. How can we determine the average visibility in kilometers?","metadata":{}},{"cell_type":"code","source":"avg_visibility = df['visibility_km'].mean()\nprint(f'Average visibility (km): {avg_visibility}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.399947Z","iopub.execute_input":"2024-10-08T21:17:24.400429Z","iopub.status.idle":"2024-10-08T21:17:24.408863Z","shell.execute_reply.started":"2024-10-08T21:17:24.400376Z","shell.execute_reply":"2024-10-08T21:17:24.407722Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 6. What is the average temperature difference between Celsius and Fahrenheit?","metadata":{}},{"cell_type":"code","source":"# Calculate the difference in temperature between Fahrenheit and Celsius\ndf['temp_diff'] = df['temperature_fahrenheit'] - (df['temperature_celsius'] * 9/5 + 32)\n\n# Calculate the average temperature difference\navg_temp_diff = df['temp_diff'].mean()\n\nprint(f'Average temperature difference between Celsius and Fahrenheit: {avg_temp_diff}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.410458Z","iopub.execute_input":"2024-10-08T21:17:24.410878Z","iopub.status.idle":"2024-10-08T21:17:24.42457Z","shell.execute_reply.started":"2024-10-08T21:17:24.410832Z","shell.execute_reply":"2024-10-08T21:17:24.422849Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 7. According to this Dataset how does temperature vary with the time of last update?","metadata":{}},{"cell_type":"code","source":"# Lets calculate the time vary with last update\ndf['last_updated'] = pd.to_datetime(df['last_updated'])\ntemp_time_correlation = df[['last_updated', 'temperature_celsius']].corr().iloc[0, 1]\nprint(f'Correlation between last updated time and temperature: {temp_time_correlation}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.435056Z","iopub.execute_input":"2024-10-08T21:17:24.435486Z","iopub.status.idle":"2024-10-08T21:17:24.462962Z","shell.execute_reply.started":"2024-10-08T21:17:24.435443Z","shell.execute_reply":"2024-10-08T21:17:24.461726Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 8. Which country has the highest recorded wind speed according to this Dataset?","metadata":{}},{"cell_type":"code","source":"max_wind_country = df.loc[df['wind_kph'].idxmax(), ['country', 'wind_kph']]\nprint(max_wind_country)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.464604Z","iopub.execute_input":"2024-10-08T21:17:24.465145Z","iopub.status.idle":"2024-10-08T21:17:24.474373Z","shell.execute_reply.started":"2024-10-08T21:17:24.465089Z","shell.execute_reply":"2024-10-08T21:17:24.473053Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 9. \"Which country and location have the highest recorded temperature in both Celsius and Fahrenheit according to this Dataset?\"","metadata":{}},{"cell_type":"code","source":"# Get the country and location with the highest temperature in Celsius\nhighest_temp_celsius = df.loc[df['temperature_celsius'].idxmax(), ['country', 'location_name', 'temperature_celsius']]\nprint(\"Country and Location with the Highest Temperature in Celsius:\")\nprint(highest_temp_celsius)\n\n# Get the country and location with the highest temperature in Fahrenheit\nhighest_temp_fahrenheit = df.loc[df['temperature_fahrenheit'].idxmax(), ['country', 'location_name', 'temperature_fahrenheit']]\nprint(\"\\nCountry and Location with the Highest Temperature in Fahrenheit:\")\nprint(highest_temp_fahrenheit)\n\n# Lets print the overall max temperatures for clarity\nprint(f\"\\nMaximum Temperature in Celsius: {highest_temp_celsius['temperature_celsius']}\")\nprint(f\"Maximum Temperature in Fahrenheit: {highest_temp_fahrenheit['temperature_fahrenheit']}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.475965Z","iopub.execute_input":"2024-10-08T21:17:24.47637Z","iopub.status.idle":"2024-10-08T21:17:24.492531Z","shell.execute_reply.started":"2024-10-08T21:17:24.476329Z","shell.execute_reply":"2024-10-08T21:17:24.491401Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 10. Is there any correlation between Nitrogen Dioxide and Sulphur Dioxide levels?","metadata":{}},{"cell_type":"code","source":"correlation_no2_so2 = df[['air_quality_Nitrogen_dioxide', 'air_quality_Sulphur_dioxide']].corr().iloc[0, 1]\nprint(f'Correlation between Nitrogen Dioxide and Sulphur Dioxide: {correlation_no2_so2}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.494031Z","iopub.execute_input":"2024-10-08T21:17:24.494458Z","iopub.status.idle":"2024-10-08T21:17:24.508705Z","shell.execute_reply.started":"2024-10-08T21:17:24.494417Z","shell.execute_reply":"2024-10-08T21:17:24.50735Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 11. How many records have Nitrogen Dioxide levels above a certain threshold > 40 µg/m³","metadata":{}},{"cell_type":"code","source":"high_no2_count = df[df['air_quality_Nitrogen_dioxide'] > 40].shape[0]\nprint(f'Number of records with Nitrogen Dioxide > 40 µg/m³: {high_no2_count}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.510244Z","iopub.execute_input":"2024-10-08T21:17:24.510735Z","iopub.status.idle":"2024-10-08T21:17:24.525931Z","shell.execute_reply.started":"2024-10-08T21:17:24.510678Z","shell.execute_reply":"2024-10-08T21:17:24.524594Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 12. Which country has the highest recorded Nitrogen Dioxide level according to this Dataset?","metadata":{}},{"cell_type":"code","source":"max_no2_country = df.loc[df['air_quality_Nitrogen_dioxide'].idxmax(), ['country', 'air_quality_Nitrogen_dioxide']]\nprint(max_no2_country)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.527425Z","iopub.execute_input":"2024-10-08T21:17:24.527885Z","iopub.status.idle":"2024-10-08T21:17:24.536966Z","shell.execute_reply.started":"2024-10-08T21:17:24.527844Z","shell.execute_reply":"2024-10-08T21:17:24.535842Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 13. Is there any correlation present between wind gust (in mph and kph) and Carbon Monoxide levels?","metadata":{}},{"cell_type":"code","source":"correlation_gust_co = df[['gust_mph', 'air_quality_Carbon_Monoxide']].corr().iloc[0, 1]\nprint(f'Correlation between Wind Gust (mph) and Carbon Monoxide: {correlation_gust_co}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.538403Z","iopub.execute_input":"2024-10-08T21:17:24.538909Z","iopub.status.idle":"2024-10-08T21:17:24.553611Z","shell.execute_reply.started":"2024-10-08T21:17:24.538834Z","shell.execute_reply":"2024-10-08T21:17:24.552423Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 14. Which country has the highest recorded Carbon Monoxide level according to this Dataset?","metadata":{}},{"cell_type":"code","source":"max_co_country = df.loc[df['air_quality_Carbon_Monoxide'].idxmax(), ['country', 'air_quality_Carbon_Monoxide']]\nprint(max_co_country)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.554884Z","iopub.execute_input":"2024-10-08T21:17:24.555256Z","iopub.status.idle":"2024-10-08T21:17:24.566082Z","shell.execute_reply.started":"2024-10-08T21:17:24.555215Z","shell.execute_reply":"2024-10-08T21:17:24.564942Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 15. How we  can calculate the number of records that show both Carbon Monoxide and Ozone levels above than their respective averages?","metadata":{}},{"cell_type":"code","source":"avg_co = df['air_quality_Carbon_Monoxide'].mean()\navg_o3 = df['air_quality_Ozone'].mean()\nhigh_both_count = df[(df['air_quality_Carbon_Monoxide'] > avg_co) & (df['air_quality_Ozone'] > avg_o3)].shape[0]\nprint(f'Number of records with both Carbon Monoxide and Ozone above average: {high_both_count}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-08T21:17:24.567533Z","iopub.execute_input":"2024-10-08T21:17:24.568643Z","iopub.status.idle":"2024-10-08T21:17:24.58442Z","shell.execute_reply.started":"2024-10-08T21:17:24.568585Z","shell.execute_reply":"2024-10-08T21:17:24.58303Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Observations:**\n* There are total 61 locations with UV index above 5 in this Dataset.\n* The Average visibility in km is 9.77309674627217\n* Average temperature difference between Celsius and Fahrenheit is 0.0016437817208954878\n* The Highest wind in kph is of the Burundi which is 2963.2\n* The Maximum Temperature in Celsius is in kuwait which is 49.2\n* The Maximum Temperature in Fahrenheit is in kuwait which is 120.6\n* There are total 1501 Number of records with Nitrogen Dioxide > 40 µg/m³\n* The air_quality_Nitrogen_dioxide level is Highest in Malasia which is 427.7\n* The air_quality_Carbon_Monoxide is highest in Indonesia which is 38879.398\n* There are total 1446 Number of records with both Carbon Monoxide and Ozone above average in this Dataset","metadata":{}}]}